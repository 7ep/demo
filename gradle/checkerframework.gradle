///////////////////////////////////////////////////////////////////////////
/// Checker Framework pluggable type-checking
///

repositories {
    mavenCentral()
}

configurations {
    checkerFrameworkAnnotatedJDK {
        description = 'a copy of JDK classes with Checker Framework type qualifers inserted'
    }
}

// By default, use Checker Framework from Maven Central.
// Pass -PcfLocal to use a locally-built version of the Checker Framework.
dependencies {
    if (!rootProject.hasProperty('cfLocal')) {
        ext.checkerFrameworkVersion = '2.5.8'
        checkerFrameworkAnnotatedJDK "org.checkerframework:jdk8:${checkerFrameworkVersion}"
        annotationProcessor "org.checkerframework:checker:${checkerFrameworkVersion}"
        implementation "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    } else if (System.getenv("CHECKERFRAMEWORK") == null) {
        throw new GradleException("Environment variable CHECKERFRAMEWORK is not set")
    } else if (! file(System.getenv("CHECKERFRAMEWORK")).exists()) {
        throw new GradleException("Environment variable CHECKERFRAMEWORK is set to non-existent directory " + System.getenv("CHECKERFRAMEWORK"))
    } else {
        ext.checkerframeworkdist = "$System.env.CHECKERFRAMEWORK/checker/dist"
        checkerFrameworkAnnotatedJDK fileTree(dir: "${ext.checkerframeworkdist}", include: "jdk8.jar")
        annotationProcessor fileTree(dir: "${ext.checkerframeworkdist}", include: 'checker.jar')
        implementation fileTree(dir: "${ext.checkerframeworkdist}", include: 'checker-qual.jar')
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '-processor', 'org.checkerframework.checker.nullness.NullnessChecker',
                '-Xmaxerrs', '10000',
                '-Xmaxwarns', '10000',
                "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}"
        ]
    }
}