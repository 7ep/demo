sourceSets {
    bddTest {
        java.srcDir 'src/bdd_test/java'
        resources.srcDir 'src/bdd_test/resources'
    }
}

dependencies {
    bddTestImplementation configurations.fastIntegrationTestImplementation
}

// in the cucumber task, we divide up the different features to lower the scope.
// Notice that we have a command for running the library tests, then the math tests, then the auth tests.
// This allows us to have a much smaller universe of step definitions per feature file, which  means
// that our steps don't need to be nearly as generic.  Genericity has its benefits in many circumstances,
// but not when it comes to keeping things as transparent and simple as possible, which is one of
// the points of testing.
// some of the configuration for running Cucumber BDD
task cucumber (type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the BDD tests.'
    dependsOn assemble, compileTestJava, compileBddTestJava
    testClassesDirs = sourceSets.bddTest.output.classesDirs
    classpath = sourceSets.bddTest.runtimeClasspath
    doLast {
        // For the library
        javaexec {
            // get the path to the jar file for jacocoagent
            def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == "jacocoagent.jar" }.singleFile
            jvmArgs = ["-javaagent:$jacocoAgent=destfile=$buildDir/jacoco/library_bdd.exec,append=false"]

            main = "io.cucumber.core.cli.Main"
            classpath = configurations.bddTestCompileClasspath +
                    sourceSets.main.output +
                    sourceSets.test.output +
                    sourceSets.bddTest.output +
                    sourceSets.fastIntegrationTest.output

            args = ['--monochrome',
                    '--plugin', 'progress',
                    '--plugin', 'json:build/bdd/library.json',
                    '--plugin', 'html:build/reports/bdd/library',
                    '--glue', 'com.coveros.training.library',
                    'src/bdd_test/resources/library']
        }

        // for the mathematics
        javaexec {
            // get the path to the jar file for jacocoagent
            def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == "jacocoagent.jar" }.singleFile
            jvmArgs = ["-javaagent:$jacocoAgent=destfile=$buildDir/jacoco/math_bdd.exec,append=false"]

            main = "io.cucumber.core.cli.Main"
            classpath = configurations.bddTestCompileClasspath +
                    sourceSets.main.output +
                    sourceSets.test.output +
                    sourceSets.bddTest.output

            args = ['--monochrome',
                    '--plugin', 'progress',
                    '--plugin', 'json:build/bdd/math.json',
                    '--plugin', 'html:build/reports/bdd/math',
                    '--glue', 'com.coveros.training.math',
                    'src/bdd_test/resources/math']
        }

        // for the authentication stories
        javaexec {
            // get the path to the jar file for jacocoagent
            def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == "jacocoagent.jar" }.singleFile
            jvmArgs = ["-javaagent:$jacocoAgent=destfile=$buildDir/jacoco/auth_bdd.exec,append=false"]

            main = "io.cucumber.core.cli.Main"
            classpath = configurations.bddTestCompileClasspath +
                    sourceSets.main.output +
                    sourceSets.test.output +
                    sourceSets.bddTest.output +
                    sourceSets.fastIntegrationTest.output

            args = ['--monochrome',
                    '--plugin', 'progress',
                    '--plugin', 'json:build/bdd/auth.json',
                    '--plugin', 'html:build/reports/bdd/authentication',
                    '--glue', 'com.coveros.training.authentication',
                    'src/bdd_test/resources/authentication']
        }


    }
    mustRunAfter test, fastIntegrationTest
}

check.dependsOn cucumber

