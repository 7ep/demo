buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:4.0.2'
    }
}


plugins {
    id 'war'

    // provides access to a database versioning tool.
    id "org.flywaydb.flyway" version "5.2.4"

    // gretty is a gradle plugin to make it easy to run a server and hotswap code at runtime.
    id 'org.gretty' version '2.3.1'

    // scans our code for static analysis
    id "org.sonarqube" version "2.7"

    // provides Cucumber reporting
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.0.15"

    // provides unit test coverage
    id 'jacoco'

    // provides the ability to see a tree of dependent tasks
    // for any particular task.
    // usage: gradle <task 1>...<task N> taskTree
    // see https://github.com/dorongold/gradle-task-tree
    id "com.dorongold.task-tree" version "1.3.1"

    // pitest provides mutation testing coverage - this shows
    // which code-under-test is actually "tested", rather than
    // simply being run during the test.  It does this by
    // changing the code and seeing if the test fails as a result.
    id 'info.solidsoft.pitest' version '1.4.0'

    // add spotbugs for static code analysis
    id "com.github.spotbugs" version "1.7.1"


}

// sets the version of Java we want to use - 8
sourceCompatibility = 1.8
targetCompatibility = 1.8

// the checker framework adds a bunch of type annotations that
// can insure safer coding practices.  See https://checkerframework.org/manual/
apply from: "$rootDir/gradle/checkerframework.gradle"

// including our script plugin for running our integration tests
apply from: "$rootDir/gradle/fast_integration_test.gradle"

// including our script plugin for running BDD-type tests
apply from: "$rootDir/gradle/bdd_test.gradle"

// Dependency Check analyzes the dependencies for potential security issues.
// see https://plugins.gradle.org/plugin/org.owasp.dependencycheck
apply plugin: 'org.owasp.dependencycheck'


repositories {
    jcenter()
    mavenCentral()
}

configurations {
    localDeps
}

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    // junit, for running unit tests
    testCompile 'junit:junit:4.12'

    // mockito, for mocking objects in our unit tests
    testCompile 'org.mockito:mockito-core:2.7.19'

    // nbvcxz is a tool to determine how robust a password is.  See
    // https://github.com/GoSimpleLLC/nbvcxz
    compile group: 'me.gosimple', name: 'nbvcxz', version: '1.4.3'

    // the glorious equalsverifier.  This is a tool that tests the contract
    // for equals and hashcode are met.  It's very strict.  Because it's very
    // strict, it forces us to create very safe, very solid code.
    // https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
    testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.0.3'

    // The commons-lang3 package has some utility classes that are very helpful
    // for those interested in safer coding.  Particularly, the equalsbuilder and hashcodebuilder.
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'

    // a logging framework, so it becomes easily possible to see what is happening
    // in our code in realtime.
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'

    // The following gives us the ability to use slf4j api calls.
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.1'


    // we'll use this as our database
    // https://mvnrepository.com/artifact/com.h2database/h2
    localDeps group: 'com.h2database', name: 'h2', version: '1.4.197'

    // so we can put a copy of h2 in a convenient place
    compile configurations.localDeps

    // so we can programmatically run flyway at startup
    compile "org.flywaydb:flyway-core:5.2.4"

    // added for SCA test
    compile 'org.apache.struts:struts2-apps:2.1.2'

    // findsecbugs plugin for SpotBugs
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}

spotbugs {
    toolVersion = '3.1.12'
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    reportsDir = file("$project.buildDir/spotbugs")
}


task copyToLib(type: Copy) {
    from configurations.localDeps
    into "$buildDir/lib"
}

pitest {
    targetClasses = ['com.coveros.training.*']  //by default "${project.group}.*"
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}

// configure jetty to run on port 8080 when we run "./gradlew appRun"
gretty {
    httpPort = 8080
    servletContainer = 'tomcat8'
    contextPath = "demo"
}

// configuration for the cucumber reports.
cucumberReports {
    outputDir = file('build/reports/bdd')
    buildName = '0'
    reports = files('build/bdd/file.json')
    testTasksFinalizedByReport = false
}

flyway {
    url = 'jdbc:h2:./build/db/training;AUTO_SERVER=TRUE;MODE=POSTGRESQL'
    driver = 'org.h2.Driver'
    user = ""
    password = ""
    schemas = ['ADMINISTRATIVE', 'LIBRARY', 'AUTH']
}


// starts the h2 console
task startH2Console(type: Exec) {
    dependsOn 'copyToLib'
    commandLine 'javaw','-cp','build/lib/h2-1.4.197.jar','org.h2.tools.Console'
}

generateCucumberReports.dependsOn(cucumber)

jacocoTestReport {
    executionData("$buildDir/jacoco/combineCoverage.exec")
}

// a way to combine the coverage reports for the purpose of seeing the
// whole picture when we run jacocoTestReport
task combineCoverage (type: JacocoMerge) {
    executionData = files("$buildDir/jacoco/test.exec", "$buildDir/jacoco/fastIntegrationTest.exec")
    mustRunAfter fastIntegrationTest
}

// Add the combined report when we run check
check.dependsOn(combineCoverage)
check.dependsOn(jacocoTestReport)


sonarqube {
    properties {
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java,src/integration_test/java,src/bdd_test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test/,build/test-results/fastIntegrationTest"
        property "sonar.jacoco.reportPaths", "build/jacoco/test.exec,build/jacoco/fastIntegrationTest.exec"
	property "sonar.host.url", "https://localhost/sonar"
	property "sonar.projectKey", "demo"
	property "sonar.projectName", "Demo Application"
	property "sonar.dependencyCheck.reportPath", "$project.buildDir/reports/dependency-check-report.xml"
    }
}

// parallellize the tests, making them finish sooner.
tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

task runApiTests(type:Exec) {
   workingDir 'api_tests'
   commandLine 'pipenv','run','pytest','--junitxml','../build/test-results/api_tests/TEST-api_test_results.xml'
}

static boolean SearchDirectoryForChromedriver(File dir) {
    return dir.listFiles({ file -> file.name.contains("chromedriver") } as FileFilter).any();
}

static boolean ScanPathForChromeDriver() {
    // Add all the directories from the system PATH variable
    List pathDirectories = System.getenv('PATH').split("[;|:]").toList()

    // Add the local ui_tests directory too - it will still work if it's there
    pathDirectories.add("ui_tests")

    return pathDirectories.any({dir -> SearchDirectoryForChromedriver(new File(dir))})
}

task runBehaveTests(type:Exec) {
   doFirst {
       def chromedriver_exists_in_ui_tests = ScanPathForChromeDriver();
       if (! chromedriver_exists_in_ui_tests) {
           ignoreExitValue true
           throw new Exception(
                   "\n\nFor your reference, here is the system path we checked:\n\n" +
                    System.getenv('PATH') +
                   "\n\n*****************************\n" +
                   "*****************************\n" +
                   "Does not look like you have Chromedriver in your \n" +
                   "PATH or ui_tests directory.\n\n" +
                   "Download it from http://chromedriver.chromium.org/ and store the binary\n" +
                   "in your system path or in the ui_tests directory.\n" +
                   "See the PATH variable expanded above.\n" +
                   "*****************************\n" +
                   "*****************************\n"

           )
       }
   }
   workingDir 'ui_tests'
   commandLine 'pipenv','run','behave'
}

task runAllTests(type: GradleBuild) {
    tasks = ['check', 'runApiTests', 'runBehaveTests']
}
// more info on test logging: https://discuss.gradle.org/t/whats-upcoming-in-gradle-1-1-test-logging/7741
test {
    testLogging {
        exceptionFormat "full" // default is "short"
        // uncomment the following to see the unit test progress in the output
        //events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

dependencyCheck {
    showSummary=false
    autoUpdate=false
    cveValidForHours=168 // a week.
    format='XML' // options are  (HTML, XML, CSV, JSON, VULN, ALL).
}

task('printReportPathsCheck'){
    doLast{
        print "\n\n\n"
        println "-------------------------------------------------------------------------------"
        println "Reports were generated by the tests."
        println "-------------------------------------------------------------------------------"
        println ""
        println "Coverage Report:         build/reports/jacoco/test/html/index.html"
        println "Cucumber BDD Report:     build/reports/bdd/cucumber-html-report-basic/index.html"
        println "Unit Test Reports:       build/reports/tests/"
        println "-------------------------------------------------------------------------------"
        print "\n"
    }
}

check.finalizedBy 'printReportPathsCheck'

task('printReportPathsDependencyCheck'){
    doLast{
        print "\n\n\n"
        println "-------------------------------------------------------------------------------"
        println "Reports were generated by the tests."
        println "-------------------------------------------------------------------------------"
        println ""
        println "Dependency Check:        build/reports/dependency-check-report.html"
        println "-------------------------------------------------------------------------------"
        print "\n"
    }
}

dependencyCheckAnalyze.finalizedBy 'printReportPathsDependencyCheck'
