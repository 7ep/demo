plugins {
    id 'war'

    // gretty is a gradle plugin to make it easy to run a server and hotswap code at runtime.
    id 'org.gretty' version '2.3.1'

    // provides access to a database versioning tool.
    id "org.flywaydb.flyway" version "5.2.4"

    // scans our code for static analysis
    id "org.sonarqube" version "2.6.2"

    // provides Cucumber reporting
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.0.15"

    // provides unit test coverage
    id 'jacoco'

    // Dependency Check analyzes the dependencies for potential security issues.
    // see https://plugins.gradle.org/plugin/org.owasp.dependencycheck
    id "org.owasp.dependencycheck" version "4.0.1"

    // provides the ability to see a tree of dependent tasks
    // for any particular task.
    // usage: gradle <task 1>...<task N> taskTree
    // see https://github.com/dorongold/gradle-task-tree
    id "com.dorongold.task-tree" version "1.3.1"
}

// the checker framework adds a bunch of type annotations that
// can insure safer coding practices.  See https://checkerframework.org/manual/
apply from: "$rootDir/gradle/checkerframework.gradle"

// including our script plugin for running our integration tests
apply from: "$rootDir/gradle/fast_integration_test.gradle"

// including our script plugin for running BDD-type tests
apply from: "$rootDir/gradle/bdd_test.gradle"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    // junit, for running unit tests
    testCompile 'junit:junit:4.12'

    // mockito, for mocking objects in our unit tests
    testCompile 'org.mockito:mockito-core:2.7.19'

    // nbvcxz is a tool to determine how robust a password is.  See
    // https://github.com/GoSimpleLLC/nbvcxz
    compile group: 'me.gosimple', name: 'nbvcxz', version: '1.4.2'

    // gives us a driver to connect to postgresql
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'

    // the glorious equalsverifier.  This is a tool that tests the contract
    // for equals and hashcode are met.  It's very strict.  Because it's very
    // strict, it forces us to create very safe, very solid code.
    // https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
    testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.0.3'

    // The commons-lang3 package has some utility classes that are very helpful
    // for those interested in safer coding.  Particularly, the equalsbuilder and hashcodebuilder.
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'

    // a logging framework, so it becomes easily possible to see what is happening
    // in our code in realtime.
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
}

// configure jetty to run on port 8080 when we run "./gradlew appRun"
gretty {
    httpPort = 8080
    servletContainer = 'tomcat8'
}

// configuration for the cucumber reports.
cucumberReports {
    outputDir = file('build/reports/bdd')
    buildName = '0'
    reports = files('build/bdd/file.json')
    testTasksFinalizedByReport = false
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/training'
    driver = 'org.postgresql.Driver'
    user = "postgres"
    password = "postgres"
    schemas = ['administrative', 'library', 'auth']
}

jacocoTestReport {
    executionData("$buildDir/jacoco/combineCoverage.exec")
}

// a way to combine the coverage reports for the purpose of seeing the
// whole picture when we run jacocoTestReport
task combineCoverage (type: JacocoMerge) {
    executionData = files("$buildDir/jacoco/test.exec", "$buildDir/jacoco/fastIntegrationTest.exec")
    mustRunAfter fastIntegrationTest
}

// Add the combined report when we run check
check.dependsOn(combineCoverage)
check.dependsOn(jacocoTestReport)


sonarqube {
    properties {
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/unit_test/java,src/integration_test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test/,build/test-results/fastIntegrationTest"
        property "sonar.jacoco.reportPaths", "build/jacoco/test.exec,build/jacoco/fastIntegrationTest.exec"
    }
}