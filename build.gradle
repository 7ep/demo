buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.jaredsburrows:gradle-checker-framework-plugin:0.2.2'
    }
}

plugins {
    id 'war'

    // gretty is a gradle plugin to make it easy to run a server and hotswap code at runtime.
    id 'org.gretty' version '2.2.0'

    // provides Cucumber reporting
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.0.15"

    // this allows AutoValue to work with Intellij
    id 'org.inferred.processors' version '1.2.18'

    // provides access to a database versioning tool.
    id "org.flywaydb.flyway" version "5.2.4"

}

// the checker framework adds a bunch of type annotations that
// can insure safer coding practices.  See https://checkerframework.org/manual/
apply plugin: 'com.jaredsburrows.checkerframework'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    // the cucumber stuff we'll need.  Cucumber is a BDD tool.
    testCompile 'io.cucumber:cucumber-java:3.0.2'
    testCompile 'io.cucumber:cucumber-junit:3.0.2'

    // junit, for running unit tests
    testCompile 'junit:junit:4.12'

    // mockito, for mocking objects in our unit tests
    testCompile 'org.mockito:mockito-core:2.7.19'

    // nbvcxz is a tool to determine how robust a password is.  See
    // https://github.com/GoSimpleLLC/nbvcxz
    compile group: 'me.gosimple', name: 'nbvcxz', version: '1.4.2'

    // gives us a driver to connect to postgresql
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'

    // the glorious equalsverifier.  This is a tool that tests the contract
    // for equals and hashcode are met.  It's very strict.  Because it's very
    // strict, it forces us to create very safe, very solid code.
    // https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
    testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.0.3'

    // The commons-lang3 package has some utility classes that are very helpful
    // for those interested in safer coding.  Particularly, the equalsbuilder and hashcodebuilder.
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'

}

sourceSets.test.java {
    srcDir 'src/integration_test/java'
    srcDir 'src/unit_test/java'
}

// configure jetty to run on port 8888 when we run "./gradlew appRun"
gretty {
    httpPort = 8888
}

// some of the configuration for running Cucumber BDD
task cucumber {
    dependsOn test
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
            args = ['--monochrome', '--plugin', 'pretty', '--plugin', 'json:build/bdd/file.json', '--glue', 'com.coveros.training', 'src/integration_test/resources']
        }
    }
}

// configuration for the cucumber reports.
cucumberReports {
    outputDir = file('build/reports/bdd')
    buildName = '0'
    reports = files('build/bdd/file.json')
    testTasksFinalizedByReport = false
}

// configure test to run cucumber, followed by cucumber reports.
// this way, when we run test or build we get all our cucumber too.
test.finalizedBy(cucumber)
cucumber.finalizedBy(generateCucumberReports)

flyway {
    url = 'jdbc:postgresql://localhost:5432/training'
    driver = 'org.postgresql.Driver'
    user = "postgres"
    password = "postgres"
    schemas = ['administrative', 'library', 'auth']
}

// Checker framework is our way to disallow nulls throughout our code,
// which is a great way to avoid a lot of potential bugs.
// See https://checkerframework.org/manual/
checkerFramework {
    checkers = [
            'org.checkerframework.checker.units.UnitsChecker',
            'org.checkerframework.checker.nullness.NullnessChecker'
    ]
}

