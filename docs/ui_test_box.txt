making a box for UI-level testing

(First create the Jenkins box.  See jenkins_box_guide.txt, then come back)

In VirtualBox, click on New.

Create a new system "uitestbox"

Make sure to choose Mac osX 64 bit for the operating system.  It's not a Mac, but for
some reason this makes mouse integration work beautifully.

Set it to use 3072 megabytes of ram and 12 gigs hard drive.

Alter its settings:
  In Networking: Adapter 1 should be NAT, Adapter 2 should be host-only networking
  Put the CentOS7 disc in the virtual drive.

Start the server.

Choose to install Centos7.  (No need to check the media first)

Choose English as the language
Click Installation Destination and click Done on the followup screen to return

Click on the network & Host name icon.

This is an ***important*** section.  Take it slow.

First, change the Host name to uitestbox.

Then, toggle the enp0s8 network adapter to ON.  That's the NAT network, so it
should just automatically work.

But let's make sure it's configured properly.  Click on Configure for it,
and Under the General tab, check the box next to "Automatically connect
to this network when it is available".  Then save it.

Select the enp0s17 network adapter.  This one we have to manually configure.  Click the
[Configure...] button in the bottom right.

Under the General tab, check the box next to "Automatically connect to this network when it is available"

Click on the IPV4 Settings tab, and change the method from automatic to manual.

Click the [Add] button.  Enter the following data:
Address:          Netmask:           Gateway:
192.168.56.102    255.255.255.0      192.168.56.1

DNS Servers: 192.168.56.1

Click on the checkbox next to "Require IPV4 addressing for this connection to complete"

Click Save.

toggle this adapter from off to on.  If done correctly, it should very quickly indicate "Connected"
with some data similar to this:
Hardware address: 08:00:27:09:16:BC
Speed 1000 Mb/s
IP Address 192.168.56.102
Subnet Mask 255.255.255.0
Default Route 192.168.56.1
DNS 192.168.56.1

Phew, done!  Click Done in the top left.

Click Software selection and choose KDE Plasma Workspaces, then click Done.  After
doing that, it can take a while for the system to be done processing.  Wait.

Click Begin Installation

While it is installing, you will see options to set the root password
and create a user.  We're not too concerned about security, since this
box is just for educational purposes.  However, it won't let you
complete installation until you create a user.  Make a user for
yourself.  See the following...

CREATE USER DURING INSTALL
--------------------------
Click on "User Creation"

Full Name: Coveros User
User name: cuser

Enable it as an administrator user (check the
box) and make it not require a password (uncheck that box).

Click Done.

Wait for the install to finish...

... wait for the install to complete...

... keep waiting...

click on reboot.

Click on Licensing.  Accept.  Click Done.  Click Finish Installation.

Login.

Right-click the screen and click on Konsole to get a command-line terminal.

DISABLE FIREWALL
----------------

First, let's turn off the firewall and SELinux (its security system).
It's a pain in the rear, and remember, this is for educational
purposes, so security is *not* a concern.  Ease of use is.

$ #turn off the firewall and disable it
$ sudo systemctl stop firewalld
$ sudo systemctl disable firewalld

DISABLE SELINUX
---------------

To disable SELinux, open /etc/selinux/config and set SELINUX mode to
disabled.  You can do that with an editor, or you can run this
command:

sudo sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config

ENABLE SSH WITH NO PASSWORD
---------------------------

Let's also change the settings on sshd (the ssh daemon) so it will
allow us to log in without a password.

sudo sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config

DISABLE STRICT HOST KEY CHECKING
--------------------------------

change the setting in ssh_config to not ask about host keys.  This needs to be done
because many of the conversations between our boxes will use ssh, and will halt
and ask the user if the host isn't current trusted.  Problem with that is
everything is automated, there isn't anyone to answer yes.  This should fix that.

sudo sed -i 's/#   StrictHostKeyChecking ask/StrictHostKeyChecking no/' /etc/ssh/ssh_config

now, reboot.

Now you can connect to your uitestbox by SSH.
Do the rest of this in ssh by connecting to "uitestbox"

Install Chrome:

 $ sudo yum install -y wget
 $ wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
 $ sudo yum localinstall -y google-chrome-stable_current_x86_64.rpm

Start Chrome by selecting it from the bottom left-hand button and entering
the text "Chrome", then click on the icon.  Choose a means of securing information,
(I used Classic, blowfish encrypted file because it was easier to set up.  Remember,
you aren't doing anything on this box but UI testing)
and get through until you see the chrome://welcome page.  Test it by going to Google.com

INSTALL JAVA
------------

$ sudo yum -y install java-1.8.0-openjdk-devel

INSTALL GIT
-----------

$ sudo yum -y install git


DATABASE_INSTALL
----------------

We'll add Postgresql

$ sudo yum install -y https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm
$ sudo yum install -y postgresql10
$ sudo yum install -y postgresql10-server

$ sudo /usr/pgsql-10/bin/postgresql-10-setup initdb
$ sudo systemctl start postgresql-10

Start the database on boot:

$ sudo systemctl enable postgresql-10

Recall that this is all educational, so security isn't the slightest
concern.  So what we will do here is make the database easily
accessible so we can work with it.  Dealing with security is a pain,
by definition, so we'll skip that in this exercise.

CONFIGURE POSTGRESQL
--------------------

First, we'll run the postgresql client as "postgres"

$ sudo -upostgres psql postgres

Run this command:

postgres=# CREATE ROLE cuser WITH SUPERUSER LOGIN;

quit psql by pressing ctrl-d or \q

create our database:

$ createdb training

One last thing.  We'll modify the Postgresql configuration file so it
trusts everyone implicitly, making it less secure but easier to work
with.  Yet again, something you wouldn't want to do on a production
system!  But we're not working with a production system, we want
things to be easy.

In the directory where the data files are kept is a file called
pg_hba.conf.  On my Centos7 Linux box I find it in
/var/lib/pgsql/10/data/pg_hba.conf

On my Windows box it is at C:\Program Files\PostgreSQL\10\data\pg_hba.conf

Modify this file.  Towards the end of the file you will see some lines
like this:

# TYPE  DATABASE        USER            ADDRESS                 METHOD
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 ident

at the end of the file, add this line:

# everything on this subnet has access to this database
host    all             all             192.168.56.255/24             trust

Change the values in the column METHOD to "trust" instead of "md5" or
"ident".  That will make the database trust whoever accesses it
locally, implicitly and completely.  This means you don't need to
provide passwords when running commands anymore, though you still need
to have roles within the database.

We also want to make this database able to be hit from outside the
box, so we can restore and run database migrations on it
from outside.  To do that, first, open the configuration file:

$ sudo vi /var/lib/pgsql/10/data/postgresql.conf

then, replace line

#listen_addresses = 'localhost'
    with
listen_addresses = '*'

Finally, restart the database

$ sudo systemctl restart postgresql-10.service



INSTALL PYTHON 3
----------------

$ sudo yum install -y gcc openssl-devel bzip2-devel libffi-devel
$ wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz
$ tar xzf Python-3.7.0.tgz
$ cd Python-3.7.0
$ ./configure --enable-optimizations
$ sudo make altinstall

INSTALL PIP
-----------

$ curl https://bootstrap.pypa.io/get-pip.py -o ~/get-pip.py

INSTALL PYTHON DEPENDENCIES
---------------------------

$ sudo /usr/local/bin/python3.7 ~/get-pip.py
$ sudo /usr/local/bin/pip3.7 install behave
$ sudo /usr/local/bin/pip3.7 install selenium
$ sudo /usr/local/bin/pip3.7 install pyhamcrest
$ sudo /usr/local/bin/pip3.7 install requests


Download Chromedriver from here: http://chromedriver.chromium.org/downloads.  At the
time of writing this, the URL went as follows:

$ curl https://chromedriver.storage.googleapis.com/2.45/chromedriver_linux64.zip > ~/chromedriver_linux64.zip

Download and unzip it on your path.  I recommend a place that is
already on your path, /usr/local/sbin

$ sudo unzip ~/chromedriver_linux64.zip -d /usr/local/sbin


install Tomcat 9:
$ wget http://www.gtlib.gatech.edu/pub/apache/tomcat/tomcat-9/v9.0.14/bin/apache-tomcat-9.0.14.tar.gz
$ tar zxf apache-tomcat-9.0.14.tar.gz
$ sudo mv apache-tomcat-9.0.14 /opt/tomcat
$ sudo useradd -r tomcat --shell /bin/false
$ sudo chown -R tomcat:tomcat /opt/tomcat/

at /etc/init.d/tomcat9 create this file:


---------------------------------- FILE START
#!/bin/sh
#
### BEGIN INIT INFO
# Provides:          tomcat9
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Should-Start:      $named
# Should-Stop:       $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Tomcat.
# Description:       Start the Tomcat servlet engine.
### END INIT INFO

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=tomcat9
DESC="Tomcat servlet engine"
CATALINA_HOME=/opt/tomcat

if [ `id -u` -ne 0 ]; then
  echo "You need root privileges to run this script"
  exit 1
fi


case "$1" in
  start)
    sudo -utomcat $CATALINA_HOME/bin/startup.sh
    sleep 5
    ;;
  stop)
    sudo -utomcat $CATALINA_HOME/bin/shutdown.sh
    ;;
esac

---------------------------------- FILE END

Change its permissions
$ sudo chmod 755 /etc/init.d/tomcat9

Add it to chkconfig

$ sudo chkconfig tomcat9 on

Now you can start the Apache Tomcat 9 server and enable it to start on boot time

$ sudo systemctl start tomcat9
$ sudo systemctl enable tomcat9

Tomcat will start serving on port 8080 on the machine.

INSTALLING OWASP-ZAP
--------------------
$ wget https://download.opensuse.org/repositories/home:cabelo/CentOS_7/home:cabelo.repo
$ sudo mv home:cabelo.repo /etc/yum.repos.d/home_cabelo.repo
$ sudo yum install -y owasp-zap

Start zap like Chrome - go to the icon in the bottom left of the screen and search
for Zap.  When it appears, click it.  You'll need to accept the agreement to continue.

Choose *not* to persist the ZAP session, and check the box to remember the choice.  Then
Click on Start.

On the menu bar, under Help, click on "Check for updates..." and update as suggested.

Change the port number so it doesn't interfere with our demo application:

Open ZAP, Tools--> Options --> local proxies
Change the default 8080 port to 8888 and click Ok.

In order to test out Zap, in the Quick Start tab, enter the following URL

URL to attack: http://localhost:8080/demo

Then, click Attack.

To do the same thing from the command line, run this:

/usr/share/owasp-zap/zap.sh -cmd -quickurl http://localhost:8080/demo