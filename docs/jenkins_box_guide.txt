create a console-only virtual machine for our Jenkins server.

1. Create new box on VirtualBox version 5.2.12 r122591 (Qt5.6.2)

2. Give it 4096 megabytes of ram and 12 gigabytes of hard drive storage

(only do the following if you haven't already created "training_network")
3. in File -> Preferences, click on Network, and click the icon on the
right to create a new network.  Double click on the newly created
network and rename it training_network, and click OK.)

in settings:
  Put the Centos7 dvd in its virtual drive...
  
  in the network tab, make it attached to: NAT network, and then
    I selected a name: training_network (a network we previously created)

Start it up.

Choose "install Centos 7".  (It defaults to "test this media and
install centos7", but it's a virtual machine, so just press the up
arrow and choose "install centos 7".)

Choose English for the languages.

Under system, click on "installation destination" and then click Done
on the page it opens up.  (it defaults properly)

Click on the network & Host name icon and toggle it from off to on,
then click Done.

Click on the "Begin Installation" button in the bottom right.

While it is installing, you will see options to set the root password
and create a user.  We're not too concerned about security, since this
box is just for educational purposes.  However, it won't let you
complete installation until you create a user.  Make a user for
yourself.  I recommend enabling it as an administrator user (check the
box) and make it not require a password (uncheck that box).

Finally, it finishes, and you can click the button labeled "reboot".  Do so.

Once it finishes rebooting, you will see a console window waiting for
you to enter your username.  It should look like this:

---------------------------------------------------

CentOS Linux 7 (Core)
Kernel 3.10.0-693.el7.x86_64 on an x86_64

localhost login: _

---------------------------------------------------

I find that working in that console is a pain.  So the first thing we
want to do is make sure we can access this using ssh and then we'll
communicate with our machine solely through that protocol.



First, log in as the user you created.  You didn't set a password, so
you shouldn't need to enter a password for it.  It's an admin user, so
you can just run sudo <whatever> to act as root.

First, let's turn off the firewall and SELinux (its security system).
It's a pain in the rear, and remember, this is for educational
purposes, so security is *not* a concern.  Ease of use is.  

$ #turn off the firewall and disable it
$ sudo systemctl stop firewalld
$ sudo systemctl disable firewalld

To disable SELinux, open /etc/selinux/config and set SELINUX mode to
disabled.  You can do that with an editor, or you can run this
command:

sudo sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config

Let's also change the settings on sshd (the ssh daemon) so it will
allow us to log in without a password.  Edit the file at
/etc/ssh/sshd_config and change the value of a parameter:

#PermitEmptyPasswords no

becomes

PermitEmptyPasswords yes

or you can run this command:

sudo sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config

now, reboot.

$ sudo reboot


run this:

  $ ip addr
  
It should show you the network details.  You are looking for the ip
address this box was assigned by the network.  It should resemble this
value: 10.0.2.16/24

CONFIGURE PORT FORWARDING
-------------------------

Once you have that, click on the menu item File -> Preferences ->
Network and double-click on training_network, and click on the "Port
Forwarding" button.  Add a new row, as follows (modify for your ip
address)

+--------------+----------+---------+-----------+-----------+------------+
| Name         | Protocol | Host IP | Host Port | Guest IP  | Guest Port |
+--------------+----------+---------+-----------+-----------+------------+
| box1_ssh     | TCP      |         | 2001      | 10.0.2.15 | 22         |
+--------------+----------+---------+-----------+-----------+------------+
| box2_ssh     | TCP      |         | 3001      | 10.0.2.16 | 22         |
+--------------+----------+---------+-----------+-----------+------------+


Then click all the OK buttons to close the windows.

You should be able to ssh into your centos box by running ssh against
localhost at 3001.


From here on out, all commands should be run from ssh.

INSTALL JAVA
------------

$ sudo yum -y install java-1.8.0-openjdk-devel

INSTALL GIT
-----------

$ sudo yum -y install git

Postgresql:

(see the documentation for installing Postgresql in system_guide.txt.  see DATABASE_INSTALL there)

INSTALLING JENKINS
------------------

Jenkins is our tool for running continuous integration.

$ curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo
$ sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
$ sudo yum install -y jenkins
$ sudo systemctl start jenkins
$ sudo systemctl enable jenkins

We'll need to modify port forwarding again. (see CONFIGURE PORT FORWARDING for
more detail).  Add a row:

+--------------+----------+---------+-----------+-----------+------------+
| Name         | Protocol | Host IP | Host Port | Guest IP  | Guest Port |
+--------------+----------+---------+-----------+-----------+------------+
| box1_ssh     | TCP      |         | 2001      | 10.0.2.15 | 22         |
+--------------+----------+---------+-----------+-----------+------------+
| box2_ssh     | TCP      |         | 3001      | 10.0.2.16 | 22         |
+--------------+----------+---------+-----------+-----------+------------+
| box2_jenkins | TCP      |         | 3002      | 10.0.2.16 | 8080       |
+--------------+----------+---------+-----------+-----------+------------+

In your browser, go to Jenkins at this URL: localhost:3002

Follow the prompts, install Jenkins.  You may choose to install the
recommended plugins, but I customized mine.  I started by selecting
the "none" link at the top, which unchecked all the plugins.  Then I chose the following:

Under Build Tools: Gradle
Under Build Analysis and Reporting: Junit
Under Pipelines and Continuous Delivery: Pipeline, Pipeline: Stage View
Under Source Code Management: Git

(I chose the minimal possible plugins to lower the memory footprint)

I created an admin with the following characteristics:
username: admin
password: admin
email: admin@test.com

After that, I rebooted the Jenkins box.  You may find this necessary - I found that
after following the preceding steps, Jenkins would hang until I rebooted it.

MAKE A GIT REPO
---------------

Now that Jenkins is up and running, let's make this same box
our Git repo, so that Git can easily notify Jenkins when it
receives a push.

First, go to your home directory:

$ cd

Create a directory to store the repo:

$ mkdir demo
$ cd demo

Make a "bare" git repo:

$ git init --bare

Push your current repo to that location as the new central repo.  Back
in the directory where you have been working with Demo, run these commands:

the following will remove the Github origin
$ git remote remove origin

this will add your new repository location as "origin":
$ git remote add origin ssh://YOUR_USER_NAME@localhost:3001/home/YOUR_USER_NAME/demo

this will push all your branches to that repo
$ git push --set-upstream --all origin

make our home directory accessible by the Jenkins user:
$ chmod 775 /home/brk

Now, we want to have the ability to notify Jenkins whenever we push
to our new repo.  Jenkins has a capability of running builds whenever
a certain endpoint is hit.  But, like all things, it's not that easy because
of security considerations.  Here's the breakdown:

CONFIGURE PIPELINE TO RUN AT GIT RECEIVE
----------------------------------------

Download the command-line-interface (CLI) tool from Jenkins:

curl http://localhost:8080/jnlpJars/jenkins-cli.jar > ~/jenkins-cli.jar

Now, create the following file, at ~/demo/hooks/post-receive

------------------------ FILE START
#!/bin/sh

exec java -jar ~/jenkins-cli.jar -s http://localhost:8080/ -auth admin:admin build demo
------------------------ FILE END

make that file executable:

$ chmod 775 ~/demo/hooks/post-receive

And now we'll try running it.  Back in the browser, in Jenkins, create a new job.  Give it
the name "Demo" and make it a "pipeline" job and click OK.  Then scroll down and click save.

You should find yourself on the Pipeline page for the "demo" project.  Back in the command
line, run this to kick off a build in Jenkins:

$ ~/demo/hooks/post-receive

You should observe a new build appear in the webpage in Jenkins.  If so, you have configured
it properly.  Whenever you push a branch, it will now run Jenkins.  That's pretty close to perfect.

Now let's modify our pipeline so it does some actual work.
- as a prerequisite (so Jenkins can access the repo), run this command:
- In Jenkins, on the pipeline page for Demo, click on Configure.
- Under Pipeline, click on the dropdown and select Pipeline script from SCM.
- on the dropdown next to SCM, select Git.
- fill in these values:
     In Repositories:
     Repository URL: /home/YOUR_USER_NAME/demo
     In Branches to Build:
     Branch specifier: refs/heads/with_database
     In Script Path: jenkins/Jenkinsfile

     Click save


Now that our Jenkins pipeline is running, and we have a Git repo, and
we have a database running, let's throw in another application - SonarQube!

INSTALL SONARQUBE
-----------------

download it to your home directory:

$ curl https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.5.zip > ~/sonarqube-7.5.zip

install the unzip command:

$ sudo yum install -y unzip

make a new directory and unzip it to there
(importantly, don't do this as root.  It will fail):

$ mkdir ~/sonarqube
$ sudo unzip ~/sonarqube-7.5.zip -d ~/sonarqube/

move the directory to opt:

$ mv ~/sonarqube/sonarqube-7.5 /opt/sonarqube

create a sonarqube user:

$ adduser sonarqube

change the ownership of the sonarqube directory to sonarqube's user:

$ chown -R sonarqube:sonarqube /opt/sonarqube

enable and start the service:

$ sudo systemctl enable sonarqube.service
$ sudo systemctl start sonarqube.service

You can view the logs for Sonarqube running at /var/log/messages.  It may take
a few minutes, but watch to see if Sonarqube is up and running.


We'll need to modify port forwarding again. (see CONFIGURE PORT FORWARDING for
more detail).  Add a row:

+--------------+----------+---------+-----------+-----------+------------+
| Name         | Protocol | Host IP | Host Port | Guest IP  | Guest Port |
+--------------+----------+---------+-----------+-----------+------------+
| box1_ssh     | TCP      |         | 2001      | 10.0.2.15 | 22         |
+--------------+----------+---------+-----------+-----------+------------+
| box2_ssh     | TCP      |         | 3001      | 10.0.2.16 | 22         |
+--------------+----------+---------+-----------+-----------+------------+
| box2_jenkins | TCP      |         | 3002      | 10.0.2.16 | 8080       |
+--------------+----------+---------+-----------+-----------+------------+
| box2_sonar   | TCP      |         | 3003      | 10.0.2.16 | 9000       |
+--------------+----------+---------+-----------+-----------+------------+

go to http://localhost:3003 and check if you see the Sonarqube dashboard.

If that is up and running, let's go back to Jenkins and install a
plugin so we can run SonarQube on our code from there.  Go to:

http://localhost:3002/pluginManager/available

and search for Sonarqube in the top right.  You should see "SonarQube scanner"
as an option.  Check that on, then Install without restart.


INSTALL WEB SERVER
------------------

In preparation for having a web server on port 80, let's add another port
forwarding rule(see CONFIGURE PORT FORWARDING for more detail).  Add a row:

+--------------+----------+---------+-----------+-----------+------------+
| Name         | Protocol | Host IP | Host Port | Guest IP  | Guest Port |
+--------------+----------+---------+-----------+-----------+------------+
| box1_ssh     | TCP      |         | 2001      | 10.0.2.15 | 22         |
+--------------+----------+---------+-----------+-----------+------------+
| box2_ssh     | TCP      |         | 3001      | 10.0.2.16 | 22         |
+--------------+----------+---------+-----------+-----------+------------+
| box2_jenkins | TCP      |         | 3002      | 10.0.2.16 | 8080       |
+--------------+----------+---------+-----------+-----------+------------+
| box2_sonar   | TCP      |         | 3003      | 10.0.2.16 | 9000       |
+--------------+----------+---------+-----------+-----------+------------+
| box2_80      | TCP      |         | 3004      | 10.0.2.16 | 80         |
+--------------+----------+---------+-----------+-----------+------------+

create and edit a new file at /etc/yum.repos.d/bintray-tatsushid-h2o-rpm.repo

-------------------- FILE START
#bintray-tatsushid-h2o-rpm - packages by tatsushid from Bintray
[bintray-tatsushid-h2o-rpm]
name=bintray-tatsushid-h2o-rpm
baseurl=https://dl.bintray.com/tatsushid/h2o-rpm/centos/$releasever/$basearch/
gpgcheck=0
repo_gpgcheck=0
enabled=1
--------------------- FILE ENDS

install it:
$ sudo yum install h2o

Once the installation finishes successfully, you can see a
configuration file at /etc/h2o/h2o.conf.

Edit that file, make it as follows.  Make sure to set the user to your
username.  That way, the web server is guaranteed to have access to the
files it needs.  "file.dirlisting: ON" means that if you go to the URL
without specifying a page, it will show you the contents of the directory.

The value in file.dir is meant to point to the place where we are storing the
output of our Cucumber report generation.  This way, you can view the status of
your BDD tests.

-------------------------------------- FILE START
user: YOUR_USER_NAME
file.dirlisting: ON
hosts:
  "localhost:80":
    listen:
      port: 80
      host: 0.0.0.0
    paths:
      "/":
        file.dir: /var/lib/jenkins/workspace/demo/build/reports/bdd/cucumber-html-reports/
access-log: /var/log/h2o/access.log
error-log: /var/log/h2o/error.log
pid-file: /var/run/h2o/h2o.pid
-------------------------------------- FILE END

To start h2o:

$ sudo systemctl enable h2o.service
$ sudo systemctl start h2o.service

To view a cucumber report, go to http://localhost:3004/overview-features.html

Let's put this link on our pipeline page in Jenkins.  To do so,
first install the Sidebar-Link plugin.  Go to:

http://localhost:3002/pluginManager/available

and search for "sidebar".  Choose Sidebar Link and Install without restart.

Now go back to your pipeline, here:

http://localhost:3002/job/demo/configure

and find the checkbox labeled "Sidebar links".  Check it on. Add a link.  Enter this:

http://localhost:3004/overview-features.html

For the link text, enter: "Cucumber report".

Click Save.

You should now see "Cucumber report" among the links on the left for your pipeline.
Click the link and make sure it goes where it should.

Let's go ahead and add a link to Sonar as well.  Click on Configure again,
and add another link under Sidebar links:

For the URL, enter:

http://localhost:3003

For the name, enter: SonarQube

Save.









// vim: ai:tw=70
