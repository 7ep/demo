create a console-only virtual machine for our Jenkins server.

You need a few things to get started.

A copy of the Centos install DVD iso:
http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso

a copy of the VirtualBox software:
https://www.virtualbox.org/wiki/Downloads

Go ahead and install VirtualBox using its installer.  The default
settings should suffice.

These instructions were written with VirtualBox 6:

1. Open VirtualBox.  Click on New.  Name it "Centos7_Jenkins_machine".

Make sure to choose Mac osX 64 bit for the operating system.  It's not a Mac, but for
some reason this makes mouse integration work beautifully.

Click Next.

2. Give it 4096 megabytes of ram.  Click Next.

3. Keep clicking next until it gives you a choice for hard-drive size.  Set it
   to 12 gigabytes.  Click Next.

(only do the following if you haven't already created "training_network")

4. in File -> Preferences, click on Network, and click the icon on the
right to create a new network.  Double click on the newly created
network and rename it training_network, and click OK enough times to close out
the dialogs)

in settings for the new Centos_Jenkins_machine box, do the following:
  Click on Storage and on the icon for the empty disc drive, and
  on the icon on the right, click and you should see an option to:
  "Choose Virtual Optical Disk File...".  Click that and choose the iso file
  for Centos you downloaded previously.
  
  in the network tab, make it attached to: NAT network, and then
    select: training_network (a network we previously created).

  Click Ok.

Start it up.

Choose "install Centos 7".  (It defaults to "test this media and
install centos7", but it's a virtual machine, so just press the up
arrow and choose "install centos 7".)

Choose English for the languages.

Under system, click on "installation destination" and then click Done
on the page it opens up.  (it defaults properly)

Click on the network & Host name icon and toggle it from off to on,
then change the hostname to jenkinsbox.  Click Done in the top left.

Leave the software selection at "minimal install"

Click on the "Begin Installation" button in the bottom right.

While it is installing, you will see options to set the root password
and create a user.  We're not too concerned about security, since this
box is just for educational purposes.  However, it won't let you
complete installation until you create a user.  Make a user for
yourself.

CREATE USER DURING INSTALL
--------------------------
Click on "User Creation"

Full Name: Coveros User
User name: cuser

Enable it as an administrator user (check the
box) and make it not require a password (uncheck that box).

Click Done.

Wait for the install to finish...

Finally, it finishes, and you can click the button labeled "reboot".  Do so.

Once it finishes rebooting, you will see a console window waiting for
you to enter your username.  It should look similar to this:

---------------------------------------------------

CentOS Linux 7 (Core)
Kernel 3.10.0-957.el7.x86_64 on an x86_64

jenkinsbox login: _

---------------------------------------------------

I find that working in that console is a pain.  So the first thing we
want to do is make sure we can access this using ssh and then we'll
communicate with our machine solely through that protocol.



First, log in as the user you created.  You didn't set a password, so
you shouldn't need to enter a password for it.  It's an admin user, so
you can just run sudo <whatever> to act as root.

DISABLE FIREWALL
----------------

First, let's turn off the firewall and SELinux (its security system).
It's a pain in the rear, and remember, this is for educational
purposes, so security is *not* a concern.  Ease of use is.  

$ #turn off the firewall and disable it
$ sudo systemctl stop firewalld
$ sudo systemctl disable firewalld

DISABLE SELINUX
---------------

To disable SELinux, open /etc/selinux/config and set SELINUX mode to
disabled.  You can do that with an editor, or you can run this
command:

sudo sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config

ENABLE SSH WITH NO PASSWORD
---------------------------

Let's also change the settings on sshd (the ssh daemon) so it will
allow us to log in without a password.  Edit the file at
/etc/ssh/sshd_config and change the value of a parameter:

#PermitEmptyPasswords no

becomes

PermitEmptyPasswords yes

or you can run this command:

sudo sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config

DISABLE STRICT HOST KEY CHECKING
--------------------------------

change the setting in ssh_config to not ask about host keys.  This needs to be done
because many of the conversations between our boxes will use ssh, and will halt
and ask the user if the host isn't current trusted.  Problem with that is
everything is automated, there isn't anyone to answer yes.  This should fix that.

edit /etc/ssh/ssh_config:

There is a line:
# StrictHostKeyChecking ask

Uncomment it and change it to "no"":

StrictHostKeyChecking no


or you can run this command:

sudo sed -i 's/# StrictHostKeyChecking ask/StrictHostKeyChecking no/' /etc/ssh/ssh_config


now, reboot.

$ sudo reboot

(wait ...)

log in again.

GET SYSTEM IP ADDRESS
---------------------

run this:

  $ ip addr | grep "inet 10"
  
You should get a line that looks similar to this:

inet 10.0.2.4/24 brd 10.0.2.255 scope global noprefixroute dynamic enp0s17

CONFIGURE PORT FORWARDING
-------------------------

Once you have that, click on the menu item File -> Preferences ->
Network and double-click on training_network, and click on the "Port
Forwarding" button.  Add a new row, as follows (modify for your ip
address)

+----------------+----------+---------+-----------+-----------+------------+
| Name           | Protocol | Host IP | Host Port | Guest IP  | Guest Port |
+----------------+----------+---------+-----------+-----------+------------+
| jenkinsbox_ssh | TCP      |         | 3001      | 10.0.2.4  | 22         |
+----------------+----------+---------+-----------+-----------+------------+


Then click all the OK buttons to close the windows.

You should be able to ssh into your centos box by running ssh against
localhost at 3001.

I am using Putty, because I am on a Windows machine, but you can
use any ssh client.

Putty can be downloaded from: https://the.earth.li/~sgtatham/putty/latest/w32/putty.exe

From here on out, all commands should be run from ssh. Log into the Jenkins machine
by going to localhost at port 3001 from your host machine.

INSTALL JAVA
------------

$ sudo yum -y install java-1.8.0-openjdk-devel

INSTALL GIT
-----------

$ sudo yum -y install git

DATABASE_INSTALL
----------------

We'll add Postgresql

$ sudo yum install -y https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm
$ sudo yum install -y postgresql10
$ sudo yum install -y postgresql10-server

$ sudo /usr/pgsql-10/bin/postgresql-10-setup initdb
$ sudo systemctl start postgresql-10

Start the database on boot:

$ sudo systemctl enable postgresql-10

Recall that this is all educational, so security isn't the slightest
concern.  So what we will do here is make the database easily
accessible so we can work with it.  Dealing with security is a pain,
by definition, so we'll skip that in this exercise.

CONFIGURE POSTGRESQL
--------------------

First, we'll run the postgresql client as "postgres"

$ sudo -upostgres psql

We should see something like this:

  -bash-4.2$ psql
  psql (9.2.24, server 10.6)
  Type "help" for help.

  postgres=#

Alright, we know the database is up and we can access it.  Let's make
it easier to access.  Still in the psql client, run this command:

  postgres=# CREATE ROLE cuser WITH SUPERUSER LOGIN;
  CREATE ROLE

View your new role by typing \dg

Log out of psql by running typing \q and pressing enter.

Try to access the psql client as cuser:

$ psql postgres

You should see something like this:

  [cuser@localhost demo]$ psql postgres
  psql (9.2.24)
  Type "help" for help.

  postgres=#

quit psql by pressing ctrl-d or \q

create our database:

$ createdb training

One last thing.  We'll modify the Postgresql configuration file so it
trusts everyone implicitly, making it less secure but easier to work
with.  Yet again, something you wouldn't want to do on a production
system!  But we're not working with a production system, we want
things to be easy.

In the directory where the data files are kept is a file called
pg_hba.conf.  On my Centos7 Linux box I find it in
/var/lib/pgsql/10/data/pg_hba.conf

On my Windows box it is at C:\Program Files\PostgreSQL\10\data\pg_hba.conf

Modify this file.  Towards the end of the file you will see some lines
like this:

# TYPE  DATABASE        USER            ADDRESS                 METHOD
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 ident

Change the values in the column METHOD to "trust" instead of "md5" or
"ident".  That will make the database trust whoever accesses it
locally, implicitly and completely.  This means you don't need to
provide passwords when running commands anymore, though you still need
to have roles within the database.

As an aside, in order to create backups of the database, run this command:

 (make sure to come up with an apt DESCRIPTION and a VERSION for this
 command)

pg_dump -Fc training > <DESCRIPTION>_<VERSION>.dump

The restore command is demonstrated in our tests.  See
setDatabaseState in PersistenceLayerTests.

INSTALLING JENKINS
------------------

Jenkins is our tool for running continuous integration.

$ curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo
$ sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
$ sudo yum install -y jenkins
$ sudo systemctl start jenkins
$ sudo systemctl enable jenkins

We'll need to modify port forwarding again. (see CONFIGURE PORT FORWARDING for
more detail).  Add a row:

+--------------------+----------+---------+-----------+-----------+------------+
| Name               | Protocol | Host IP | Host Port | Guest IP  | Guest Port |
+--------------------+----------+---------+-----------+-----------+------------+
| jenkinsbox_ssh     | TCP      |         | 3001      | 10.0.2.4  | 22         |
+--------------------+----------+---------+-----------+-----------+------------+
| jenkinsbox_jenkins | TCP      |         | 3002      | 10.0.2.4  | 8080       |
+--------------------+----------+---------+-----------+-----------+------------+

In your browser, go to Jenkins at this URL: http://localhost:3002

You will need the password for the new Jenkins, here:

$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword

Copy that password and use it when prompted.  Follow the prompts, install Jenkins.
Choose "Install Suggested Plugins"

I created an admin with the following characteristics:
username: admin
password: admin
email: admin@test.com

Click Save and Continue.

It will show you the hostname it came up with for itself:

http://localhost:3002/

Click Save and Finish.
Click Start using Jenkins

MAKE A GIT REPO
---------------

Now that Jenkins is up and running, let's make this same box
our Git repo, so that Git can easily notify Jenkins when it
receives a push.

Back on the ssh command line...

First, go to your home directory:

$ cd

Create a directory to store the repo:

$ mkdir demo
$ cd demo

Make a "bare" git repo:

$ git init --bare

Push your current repo to that location as the new central repo.  Back
in the directory where you have been working with Demo, (on the other
machine) run these commands:

the following will remove the Github origin
$ git remote remove origin

this will add your new repository location as "origin":
$ git remote add origin ssh://cuser@localhost:3001/home/cuser/demo

this will push all your branches to that repo
$ git push --set-upstream --all origin

Now, back on the jenkinsbox command line...

make our home directory accessible by the Jenkins user:
$ chmod 775 /home/cuser

Now, we want to have the ability to notify Jenkins whenever we push
to our new repo.  Jenkins has a capability of running builds whenever
a certain endpoint is hit.  But, like all things, it's not that easy because
of security considerations.  Here's the breakdown:

CONFIGURE PIPELINE TO RUN AT GIT RECEIVE
----------------------------------------

Download the command-line-interface (CLI) tool from Jenkins:

curl http://localhost:8080/jnlpJars/jenkins-cli.jar > ~/jenkins-cli.jar

Now, create the following file, at ~/demo/hooks/post-receive

------------------------ FILE START
#!/bin/sh

exec java -jar ~/jenkins-cli.jar -s http://localhost:8080/ -auth admin:admin build demo
------------------------ FILE END

make that file executable:

$ chmod 775 ~/demo/hooks/post-receive

And now we'll try running it.  Back in the browser, in Jenkins, create a new job.  Give it
the name "Demo" and make it a "pipeline" job and click OK.

Then scroll down and click save.

You should find yourself on the Pipeline page for the "demo" project.  Back in the command
line, run this to kick off a build in Jenkins:

$ ~/demo/hooks/post-receive

You should observe a new build appear in the webpage in Jenkins.  If so, you have configured
it properly.  Whenever you push a branch, it will now run Jenkins.  That's pretty close to perfect.

Now let's modify our pipeline so it does some actual work.
- as a prerequisite (so Jenkins can access the repo), run this command:
$ chmod 775 /home/cuser

- In Jenkins, on the pipeline page for Demo, click on Configure.
- Check the box for "discard old builds",
    Strategy: log rotation
    Max # of builds to keep: 5
- Check the box labeled "Do not allow concurrent builds".  (We don't want race conditions
    in our pipeline, and we don't want excessive memory usage on this demo machine)
- Under Pipeline, click on the dropdown and select Pipeline script from SCM.
- on the dropdown next to SCM, select Git.
- fill in these values:
     In Repositories:
     Repository URL: /home/cuser/demo
     In Branches to Build:
     Branch specifier: refs/heads/with_database
     In Script Path: jenkins/Jenkinsfile

     Click save


Now that our Jenkins pipeline is running, and we have a Git repo, and
we have a database running, let's throw in another application - SonarQube!

INSTALL SONARQUBE
-----------------

download it to your home directory:

$ curl https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.5.zip > ~/sonarqube-7.5.zip

install the unzip command:

$ sudo yum install -y unzip

make a new directory and unzip it to there
(importantly, don't do this as root.  It will fail):

$ mkdir ~/sonarqube
$ sudo unzip ~/sonarqube-7.5.zip -d ~/sonarqube/

move the directory to opt:

$ sudo mv ~/sonarqube/sonarqube-7.5 /opt/sonarqube

create a sonarqube user:

$ sudo adduser sonarqube

change the ownership of the sonarqube directory to sonarqube's user:

$ sudo chown -R sonarqube:sonarqube /opt/sonarqube

Create the file /etc/systemd/system/sonar.service with this content:

------------------------------- FILE START
[Unit]
Description=SonarQube service
After=syslog.target network.target

[Service]
Type=simple
User=sonarqube
Group=sonarqube
PermissionsStartOnly=true
ExecStart=/bin/nohup /bin/java -Xms32m -Xmx32m -Djava.net.preferIPv4Stack=true -jar /opt/sonarqube/lib/sonar-application-7.5.jar
StandardOutput=syslog
LimitNOFILE=65536
LimitNPROC=8192
TimeoutStartSec=5
Restart=always

[Install]
WantedBy=multi-user.target

------------------------------- FILE END

Start Sonarqube and register it to start at boot:

$ sudo systemctl start sonar
$ sudo systemctl enable sonar

You can view the logs for Sonarqube running at /var/log/messages.  It may take
a few minutes, but watch to see if Sonarqube is up and running.


We'll need to modify port forwarding again. (see CONFIGURE PORT FORWARDING for
more detail).  Add a row:


+--------------------+----------+---------+-----------+-----------+------------+
| Name               | Protocol | Host IP | Host Port | Guest IP  | Guest Port |
+--------------------+----------+---------+-----------+-----------+------------+
| jenkinsbox_ssh     | TCP      |         | 3001      | 10.0.2.4  | 22         |
+--------------------+----------+---------+-----------+-----------+------------+
| jenkinsbox_jenkins | TCP      |         | 3002      | 10.0.2.4  | 8080       |
+--------------------+----------+---------+-----------+-----------+------------+
| jenkinsbox_sonar   | TCP      |         | 3003      | 10.0.2.4  | 9000       |
+--------------------+----------+---------+-----------+-----------+------------+

go to http://localhost:3003 and check if you see the Sonarqube dashboard.

If that is up and running, let's go back to Jenkins and install a
plugin so we can run SonarQube on our code from there.  Go to:

http://localhost:3002/pluginManager/available

and search for Sonarqube in the top right.  You should see "SonarQube scanner"
as an option.  Check that on, then Install without restart.


INSTALL WEB SERVER
------------------

In preparation for having a web server on port 80, let's add another port
forwarding rule(see CONFIGURE PORT FORWARDING for more detail).  Add a row:

+--------------------+----------+---------+-----------+-----------+------------+
| Name               | Protocol | Host IP | Host Port | Guest IP  | Guest Port |
+--------------------+----------+---------+-----------+-----------+------------+
| jenkinsbox_ssh     | TCP      |         | 3001      | 10.0.2.4  | 22         |
+--------------------+----------+---------+-----------+-----------+------------+
| jenkinsbox_jenkins | TCP      |         | 3002      | 10.0.2.4  | 8080       |
+--------------------+----------+---------+-----------+-----------+------------+
| jenkinsbox_sonar   | TCP      |         | 3003      | 10.0.2.4  | 9000       |
+--------------------+----------+---------+-----------+-----------+------------+
| jenkinsbox_http    | TCP      |         | 3004      | 10.0.2.4  | 80         |
+--------------------+----------+---------+-----------+-----------+------------+

create and edit a new file at /etc/yum.repos.d/bintray-tatsushid-h2o-rpm.repo

-------------------- FILE START
#bintray-tatsushid-h2o-rpm - packages by tatsushid from Bintray
[bintray-tatsushid-h2o-rpm]
name=bintray-tatsushid-h2o-rpm
baseurl=https://dl.bintray.com/tatsushid/h2o-rpm/centos/$releasever/$basearch/
gpgcheck=0
repo_gpgcheck=0
enabled=1
--------------------- FILE ENDS

install it:
$ sudo yum install -y h2o

Once the installation finishes successfully, you can see a
configuration file at /etc/h2o/h2o.conf.

Edit that file, make it as follows.  Make sure to set the user to your
username.  That way, the web server is guaranteed to have access to the
files it needs.  "file.dirlisting: ON" means that if you go to the URL
without specifying a page, it will show you the contents of the directory.

The value in file.dir is meant to point to the place where we are storing the
output of our Cucumber report generation.  This way, you can view the status of
your BDD tests.

-------------------------------------- FILE START
user: cuser
file.dirlisting: ON
hosts:
  "localhost:80":
    listen:
      port: 80
      host: 0.0.0.0
    paths:
      "/":
        file.dir: /var/lib/jenkins/workspace/demo/build/reports/bdd/cucumber-html-reports/
access-log: /var/log/h2o/access.log
error-log: /var/log/h2o/error.log
pid-file: /var/run/h2o/h2o.pid
-------------------------------------- FILE END

To start h2o:

$ sudo systemctl enable h2o.service
$ sudo systemctl start h2o.service

Eventually we want to be able to view a cucumber report,
by going to http://localhost:3004/overview-features.html

Let's put this link on our pipeline page in Jenkins.  To do so,
first install the Sidebar-Link plugin.  Go to:

http://localhost:3002/pluginManager/available

and search for "sidebar".  Choose Sidebar Link and Install without restart.

Now go back to your pipeline, here:

http://localhost:3002/job/demo/configure

and find the checkbox labeled "Sidebar links".  Check it on. Add a link.  Enter this:

Link URL: http://localhost:3004/overview-features.html

Link Text: "Cucumber report".

Click Save.

You should now see "Cucumber report" among the links on the left for your pipeline.
Click the link and make sure it goes where it should.

Let's go ahead and add a link to Sonar as well.  Click on Configure again,
and add another link under Sidebar links:

Link URL: http://localhost:3003

Link Text: SonarQube

Save.

INSTALLING FLYWAY
-----------------

you'll need Flyway for database migration commands when deploying to downstream environments.

To do so:

first, install wget

$ sudo yum install -y wget

Then, get Flyway installed:

$ wget https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.2.4/flyway-commandline-5.2.4-linux-x64.tar.gz
$ tar zxf flyway-commandline-5.2.4-linux-x64.tar.gz
$ sudo mv flyway-5.2.4 /opt/flyway
$ sudo chmod 755 /opt/flyway/flyway


ADD HOSTS FILE FOR OTHER BOXES
------------------------------

Add an entry to the ui tests box (you may not have created it yet.
Come back here when you do)

$ sudo vi /etc/hosts

and add this line:
  IP_ADDRESS_FOR_UIBOX    uitestbox


SECURITY CHECK
----------------------

There is a jenkinsfile for a nightly security check.  This check
scans the dependencies of the project for any issues that have
been published.  Because this list does not get updated very often,
and because it takes 10 minutes to run the scan, it is most appropriate to run
separately on a rare basis.  For this reason we will configure it to run
once a day.  To set up this pipeline:

Go here to create a new Jenkins job:

http://localhost:3002/view/all/newJob

name the job "demo_security_testing" and select Pipeline, then click OK.

Check the box marked "Discard old builds"
  Strategy: Log rotation
  Max # of builds to keep: 5

Check the box for "Do not allow concurrent builds."

In Sidebar Links -
  Link URL: http://localhost:3004/dependencycheck/dependency-check-report.html
  Link Text: Dependency Check Report

Under Build Triggers, check the box for "Build after other projects are built", and
set to watch demo.  Trigger only if build is stable.

Under Pipeline Definition, choose Pipeline Script from SCM.
  SCM: Git
    Repository URL: /home/cuser/demo/
    Branch Specifier: refs/heads/with_database
    Script Path: jenkins/Jenkinsfile.security

Save.

Click on Build Now to see this run.  It should take about 10 minutes.




// vim: ai:tw=70
