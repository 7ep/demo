// This jenkinsfile is used to run CI/CD on my local (Windows) box, no VM's needed.

pipeline {

  agent any

  stages {

    stage('Build') {
      steps {
        sh './gradlew clean assemble'
      }
    }

    stage('Unit Tests') {
      steps {
        sh './gradlew test'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
      }
    }

    stage('Database Tests') {
      steps {
        sh './gradlew integrate'
      }
      post {
        always {
          junit 'build/test-results/integrate/*.xml'
        }
      }
    }

    stage('Automated Acceptance Tests') {
      steps {
        sh './gradlew generateCucumberReports'
        // generate the code coverage report for jacoco
        sh './gradlew jacocoTestReport'
      }
      post {
          always {
            junit 'build/test-results/bdd/*.xml'
          }
        }
    }

    stage('Static Analysis') {
      steps {
        sh './gradlew sonarqube'
        // wait for sonarqube to finish its analysis
        sleep 5
        sh './gradlew checkQualityGate'
      }
    }


    stage('Deploy to test') {
      steps {
      sh './gradlew deployToTestWindowsLocal'
      // pipenv needs to be installed and on the path for this to work.
      sh 'pipenv install'
      }
    }

    stage('API Tests') {
      steps {
        sh './gradlew runApiTests'
      }
      post {
        always {
          junit 'build/test-results/api_tests/*.xml'
        }
      }
    }

    // We use a BDD framework for some UI tests, Behave, because Python rules
    // when it comes to experimentation with UI tests.  You can try things and see how they work out.
    stage('UI BDD Tests') {
      steps {
        sh './gradlew runBehaveTests'
        sh './gradlew generateCucumberReport'
      }
      post {
        always {
          junit 'build/test-results/bdd_ui/*.xml'
        }
      }
    }

    stage('UI Tests') {
        steps {
            sh 'cd src/ui_tests/java && ./gradlew test'
        }
        post {
            always {
                junit 'src/ui_tests/java/build/test-results/test/*.xml'
            }
        }
    }

    stage('Analyze security of dependencies') {
      steps {
         sh './gradlew dependencyCheckAnalyze'
      }
    }

    stage('Testing performance') {
      steps {
         sh './gradlew runPerfTests'
      }
    }

    stage('Mutation testing') {
      steps {
         sh './gradlew pitest'
      }
    }


    // This is the stage where we deploy to production.  If any test
    // fails, we won't get here.  Note that we aren't really doing anything - this
    // is a token step, to indicate whether we would have deployed or not.  Nothing actually
    // happens, since this is a demo project.
    stage('Deploy to Prod') {
      steps {
        // just a token operation while we pretend to deploy
        sh 'sleep 5'
      }
    }

  }

}
