pipeline {

  agent any

  stages {

    stage('Build') {
      steps {
        sh './gradlew clean assemble'
      }
    }

    stage('Unit Tests') {
      steps {
        sh './gradlew test'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
      }
    }

    stage('Database Tests') {
      steps {
        sh './gradlew fastIntegrationTest'
      }
      post {
        always {
          junit 'build/test-results/fastIntegrationTest/*.xml'
        }
      }
    }

    stage('Automated Acceptance Tests') {
      steps {
        sh './gradlew generateCucumberReports'
        // generate the code coverage report for jacoco
        sh './gradlew jacocoTestReport'
      }
    }

    stage('Static Analysis') {
      steps {
        sh './gradlew sonarqube'
      }
    }

    stage('Deploy to test') {
      steps {
      sh './gradlew deployToTest'
      }
    }

    stage('API Tests') {
      steps {
        sh 'ssh cuser@uitestbox "cd demo_tests ; ./gradlew runApiTests"'
        sh 'mkdir build/test-results/api_tests'
        sh 'scp -r cuser@uitestbox:~/demo_tests/build/test-results/api_tests/* build/test-results/api_tests/'
      }
      post {
        always {
          junit 'build/test-results/api_tests/*.xml'
        }
      }
    }

    // We use a different framework for UI tests, Behave, because Python rules
    // when it comes to experimentation with UI tests.  You can try things and see how they work out.
    stage('UI Tests') {
      steps {
        // following line will clear Zap's memory:
        sh 'ssh cuser@uitestbox "curl http://zap/JSON/core/action/newSession -s --proxy localhost:8888"'

        // run the UI tests
        sh 'ssh cuser@uitestbox ". /etc/profile; cd demo_tests ; export DISPLAY=:0; ./gradlew runBehaveTests"'

        // copy over the test results
        sh 'mkdir build/test-results/bdd_ui'
        sh 'scp -r cuser@uitestbox:~/demo_tests/build/test-results/bdd_ui/* build/test-results/bdd_ui/'
        sh 'scp cuser@uitestbox:~/demo_tests/build/bdd/behave_cucumber_style.json build/bdd/'
        sh './gradlew generateCucumberReport'

        // following line will generate a new report and store it at ~/zap_report.html
        sh 'ssh cuser@uitestbox "curl http://zap/OTHER/core/other/htmlreport --proxy localhost:8888 > ~/zap_report.html"'

        // copy that report to our server
        sh 'scp cuser@uitestbox:~/zap_report.html build/reports/'
      }
      post {
        always {
          junit 'build/test-results/bdd_ui/*.xml'
        }
      }
    }

    stage('Analyze security of dependencies') {
      steps {
         sh './gradlew dependencyCheckAnalyze'
      }
    }


    // This is the stage where we deploy to production.  If any test
    // fails, we won't get here.  Note that we aren't really doing anything - this
    // is a token step, to indicate whether we would have deployed or not.  Nothing actually
    // happens, since this is a demo project.
    stage('Deploy to Prod') {
      steps {
        // just a token operation while we pretend to deploy
        sh 'sleep 5'
      }
    }

  }

}
