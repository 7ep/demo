pipeline {

  agent any


  environment {
    DEMO_PROJECT_HOME   =  "${env.WORKSPACE}"
    POSTGRES_BIN_DIR    = '/usr/pgsql-10/bin'
  }

  stages {

    stage('Build') {
      steps {
        sh './gradlew clean assemble'
      }
    }

    stage('Unit Tests') {
      steps {
        sh './gradlew test'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
      }
    }

    stage('Database Tests') {
      steps {
        sh './gradlew fastIntegrationTest'
      }
      post {
        always {
          junit 'build/test-results/fastIntegrationTest/*.xml'
        }
      }
    }

    stage('Static Analysis') {
      steps {
        sh './gradlew sonarqube'
      }
    }

    stage('Automated Acceptance Tests') {
      steps {
        sh './gradlew generateCucumberReports'
      }
    }

    stage('Deploy to test') {
      steps {
        // move the web app to the box in the proper place.
        sh 'scp /var/lib/jenkins/workspace/demo/build/libs/demo*.war cuser@uitestbox:~/demo.war'
        sh 'ssh cuser@uitestbox sudo mv demo.war /opt/tomcat/webapps/'

        // need demo_tests on the box, that's where we have the UI tests located.
        sh 'ssh cuser@uitestbox rm -fr demo_tests'
        sh 'ssh cuser@uitestbox git clone cuser@jenkinsbox:~/demo demo_tests --branch master'
        sh 'ssh cuser@uitestbox "cd demo_tests;pipenv install"'

        sh 'ssh cuser@uitestbox "sudo service tomcat9 stop && sudo service tomcat9 start"'
        // need a little time to wait for Tomcat to initialize the application...
        sh 'sleep 10'
      }
    }

    stage('API Tests') {
      steps {
        sh 'ssh cuser@uitestbox "cd demo_tests ; ./gradlew runApiTests"'
        sh 'mkdir build/test-results/api_tests'
        sh 'scp -r cuser@uitestbox:~/demo_tests/build/test-results/api_tests/* build/test-results/api_tests/'
      }
      post {
        always {
          junit 'build/test-results/api_tests/*.xml'
        }
      }
    }

    // We use a different framework for UI tests, Behave, because Python rules
    // when it comes to experimentation with UI tests.  You can try things and see how they work out.
    stage('UI Tests') {
      steps {
        sh 'ssh cuser@uitestbox "cd demo_tests ; export DISPLAY=:0; ./gradlew runBehaveTests"'
        sh 'mkdir build/test-results/bdd_ui'
        sh 'scp -r cuser@uitestbox:~/demo_tests/build/test-results/bdd_ui/* build/test-results/bdd_ui/'
      }
      post {
        always {
          junit 'build/test-results/bdd_ui/*.xml'
        }
      }
    }


    // This is the stage where we deploy to production.  If any test
    // fails, we won't get here.  Note that we aren't really doing anything - this
    // is a token step, to indicate whether we would have deployed or not.  Nothing actually
    // happens, since this is a demo project.
    stage('Deploy to Prod') {
      steps {
        // just a token operation while we pretend to deploy
        sh 'sleep 5'
      }
    }

  }

}
