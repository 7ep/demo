pipeline {

  agent any


  environment {
    DEMO_PROJECT_HOME   =  "${env.WORKSPACE}"
    POSTGRES_BIN_DIR    = '/usr/pgsql-10/bin'
  }

  stages {

    stage('Build') {
      steps {
        sh './gradlew clean assemble'
      }
    }

    stage('Unit Tests') {
      steps {
        sh './gradlew test'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
      }
    }

    stage('Static Analysis') {
      steps {
        sh './gradlew sonarqube'
      }
    }

    stage('Integration Tests') {
      steps {
        sh './gradlew flywayMigrate -i'
        sh './gradlew fastIntegrationTest'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
      }
    }

    stage('Automated Acceptance Tests') {
      steps {
        sh './gradlew cucumber'
        sh './gradlew generateCucumberReports'
      }
    }

    stage('Deploy to test') {
      steps {
        // move the web app to the box in the proper place.
        sh 'scp -r /var/lib/jenkins/workspace/demo/build/libs/demo.war brk@10.0.2.16:~/demo.war'
        sh 'ssh brk@10.0.2.16 sudo mv ~/demo.war /opt/tomcat/webapps/'

        // need demo_tests on the box, that's where we have the UI tests located.
        sh 'ssh brk@10.0.2.16 rm -fr demo_tests'
        sh 'ssh brk@10.0.2.16 git clone brk@10.0.2.14:~/demo demo_tests --branch with_database'

        // restore to a known point, then run migration.  Clean and simple.
        sh 'pg_restore --host=10.0.2.16 --port=5432 --username=postgres --dbname training --no-password --clean /var/lib/jenkins/workspace/demo/db_sample_files/initial_empty_state_v2.dump'
        sh '/opt/flyway/flyway migrate -driver=org.postgresql.Driver -user=postgres -password=postgres -schemas=administrative,library,auth -url=jdbc:postgresql://10.0.2.16/training -locations=filesystem:/var/lib/jenkins/workspace/demo/src/main/resources/db/migration'

        // need a little time to wait for Tomcat to initialize the application...
        sh 'sleep 5'
      }
    }

    // We use a different framework for UI tests, Behave, because Python rules
    // when it comes to experimentation with UI tests.  You can try things and see how they work out.
    stage('UI Tests') {
      steps {
        sh 'ssh brk@10.0.2.16 demo_tests/ui_tests/run_behave.sh'
      }
    }

  }

}
