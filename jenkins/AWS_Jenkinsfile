// this is the Jenkinsfile when used on the Amazon cloud servers for CI/CD.

pipeline {

  agent any

  stages {

    stage('Request test instance') {
      steps {
        sh './gradlew provisionTestInstance'
      }
    }

    stage('Build') {
      steps {
        sh './gradlew clean assemble'
      }
    }

    stage('Unit Tests') {
      steps {
        sh './gradlew test'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
      }
    }

    stage('Database Tests') {
      steps {
        sh './gradlew integrate'
      }
      post {
        always {
          junit 'build/test-results/fastIntegrationTest/*.xml'
        }
      }
    }

    stage('Automated Acceptance Tests') {
      steps {
        sh './gradlew generateCucumberReports'
        // generate the code coverage report for jacoco
        sh './gradlew jacocoTestReport'
      }
    }

    stage('Static Analysis') {
      steps {
       // TODO find a way to pass this to the URL for our sonarqube
        sh './gradlew sonarqube'
      }
    }

    stage('Deploy to test') {
      steps {
      // TODO find a way to pass in URL to deploy to
      sh './gradlew deployToTest'
      }
    }

    stage('API Tests') {
      steps {
      // TODO find a way to pass in URL to run tests on box and where the UI box should point.
        sh './gradlew runApiTestsOnUiTest'
      }
      post {
        always {
          junit 'build/test-results/api_tests/*.xml'
        }
      }
    }

    // We use a different framework for UI tests, Behave, because Python rules
    // when it comes to experimentation with UI tests.  You can try things and see how they work out.
    stage('UI Tests') {
      steps {
      // TODO find a way to pass in URL to run tests on box and where the UI box should point.
        sh './gradlew runUiTestsOnUITestMachine'
        sh './gradlew generateCucumberReport'
      }
      post {
        always {
          junit 'build/test-results/bdd_ui/*.xml'
        }
      }
    }

    stage('Analyze security of dependencies') {
      steps {
         sh './gradlew dependencyCheckAnalyze'
      }
    }

    stage('Analyze performance') {
      steps {
      // TODO provide all URL's.  Run perf tests from UI test box.
        sh './gradlew runPerfTests'
      }
    }


    // This is the stage where we deploy to production.  If any test
    // fails, we won't get here.
    // We will deploy to a powerful machine.  We'll provision it first, synchronously.
    stage('Deploy to Prod') {
      steps {
        sh './gradlew provisionProd'
        sh './gradlew deployToProd'
      }
    }

  }

}
