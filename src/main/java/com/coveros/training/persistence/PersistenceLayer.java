package com.coveros.training.persistence;

import com.coveros.training.CheckUtils;
import com.coveros.training.StringUtils;
import com.coveros.training.domainobjects.Book;
import com.coveros.training.domainobjects.Borrower;
import com.coveros.training.domainobjects.Loan;
import com.coveros.training.domainobjects.User;
import org.flywaydb.core.Flyway;
import org.h2.jdbcx.JdbcConnectionPool;

import javax.sql.DataSource;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.*;

public class PersistenceLayer {

    private final DataSource dataSource;

    public PersistenceLayer() {
        this(obtainConnectionPool());
    }

    PersistenceLayer(DataSource ds) {
        dataSource = ds;
    }

    private static JdbcConnectionPool obtainConnectionPool() {
        return JdbcConnectionPool.create(
            "jdbc:h2:mem:training", "", "");
    }

    /**
     * This command provides a template to execute updates (including inserts) on the database
     * @param sqlData An object that contains the necessary components to run a SQL statement.
     *                Usually contains some SQL text and some values that will be injected
     *                into the statement at run-time.
     */
    void executeUpdateTemplate(SqlData sqlData) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st = prepareStatementWithKeys(sqlData, connection)) {
                executeUpdateOnPreparedStatement(sqlData, st);
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    private long executeInsertTemplate(SqlData sqlData) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st = prepareStatementWithKeys(sqlData, connection)) {
                return executeInsertOnPreparedStatement(sqlData, st);
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    long executeInsertOnPreparedStatement(SqlData sqlData, PreparedStatement st) throws SQLException {
        sqlData.applyParametersToPreparedStatement(st);
        st.executeUpdate();
        try (ResultSet generatedKeys = st.getGeneratedKeys()) {
            long newId;
            if (generatedKeys.next()) {
                newId = generatedKeys.getLong(1);
                assert (newId > 0);
            } else {
                throw new SqlRuntimeException("failed Sql.  Description: " + sqlData.description + " SQL code: " + sqlData.preparedStatement);
            }
            return newId;
        }
    }

    private void executeUpdateOnPreparedStatement(SqlData sqlData, PreparedStatement st) throws SQLException {
        sqlData.applyParametersToPreparedStatement(st);
        st.executeUpdate();
    }

    /**
     * A helper method.  Simply creates a prepared statement that
     * always returns the generated keys from the database, like
     * when you insert a new row of data in a table with auto-generating primary key.
     * @param sqlData see {@link SqlData}
     * @param connection a typical {@link Connection}
     */
    private PreparedStatement prepareStatementWithKeys(SqlData sqlData, Connection connection) throws SQLException {
        return connection.prepareStatement(
                     sqlData.preparedStatement,
                     Statement.RETURN_GENERATED_KEYS);
    }

    /**
     * Creates a new borrower in the database
     * @param borrowerName the name of the borrower
     * @return a long id representing its id in the database.  Generated by the database.
     */
    long saveNewBorrower(String borrowerName) {
        final SqlData sqlData = new SqlData(
            "adds a new library borrower",
            "INSERT INTO library.borrower (name) VALUES (?);");
        sqlData.addParameter(borrowerName, String.class);

        return executeInsertTemplate(sqlData);
    }

    /**
     * Creates a new loan of a book in the database.
     * @param book a book we have to loan out
     * @param borrower a person who is borrowing the book
     * @param borrowDate the date this book was borrowed
     * @return a long id representing its id in the database.  Generated by the database.
     */
    long createLoan(Book book, Borrower borrower, Date borrowDate) {
        final SqlData sqlData = new SqlData(
            "Creates a new loan of a book to a borrower",
            "INSERT INTO library.loan (book, borrower, borrow_date) VALUES (?, ?, ?);");
        sqlData.addParameter(book.id, Long.class);
        sqlData.addParameter(borrower.id, Long.class);
        sqlData.addParameter(borrowDate, Date.class);

        return executeInsertTemplate(sqlData);
    }

    /**
     * Creates a new book in the database
     * @param bookTitle the String title of a book
     * @return a long id representing its id in the database.  Generated by the database.
     */
    long saveNewBook(String bookTitle) {
        final SqlData sqlData = new SqlData(
            "Creates a new book in the database",
            "INSERT INTO library.book (title) VALUES (?);");
        sqlData.addParameter(bookTitle, String.class);

        return executeInsertTemplate(sqlData);
    }

    /**
     * Save a new user to the database
     * @param username a String name of a user
     * @return a long id representing its id in the database.  Generated by the database.
     */
    long saveNewUser(String username) {
        final SqlData sqlData = new SqlData(
            "Creates a new user in the database",
            "INSERT INTO auth.user (name) VALUES (?);");
        sqlData.addParameter(username, String.class);

        return executeInsertTemplate(sqlData);
    }

    /**
     * If we already have a borrower, this command allows us to change
     * their values (except for their id)
     * @param id the id of a borrower (a constant)
     * @param borrowerName the name of a borrower, which we can change.
     */
    void updateBorrower(long id, String borrowerName) {
        CheckUtils.checkIntParamPositive(id);
        final SqlData sqlData = new SqlData(
            "Updates the borrower's data",
            "UPDATE library.borrower SET name = ? WHERE id = ?;");
        sqlData.addParameter(borrowerName, String.class);
        sqlData.addParameter(id, Long.class);
        executeUpdateTemplate(sqlData);
    }

    /**
     * Given the id for a borrower, this command returns their name.
     * @param id a borrower's id.
     * @return the borrower's name, or an empty string if not found
     */
    String getBorrowerName(int id) {
        CheckUtils.checkIntParamPositive(id);
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st =
                     connection.prepareStatement(
                         "SELECT name FROM library.borrower WHERE id = ?;")) {
                st.setLong(1, id);
                try (ResultSet resultSet = st.executeQuery()) {
                    if (resultSet.next()) {
                        final String name = resultSet.getString(1);
                        return StringUtils.makeNotNullable(name);
                    } else {
                        return "";
                    }
                }
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    /**
     * Searches for a borrower by name.  Returns full details
     * if found.  return empty borrower data if not found.
     * @param borrowerName the name of a borrower
     * @return a valid borrower, or an empty borrower if not found
     */
    Borrower searchBorrowerDataByName(String borrowerName) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st =
                     connection.prepareStatement(
                         "SELECT id, name FROM library.borrower WHERE name = ?;")) {
                st.setString(1, borrowerName);
                try (ResultSet resultSet = st.executeQuery()) {
                    if (resultSet.next()) {
                        long id = resultSet.getLong(1);
                        String name = StringUtils.makeNotNullable(resultSet.getString(2));
                        return new Borrower(id, name);
                    } else {
                        return Borrower.createEmpty();
                    }
                }
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    Book searchBooksByTitle(String bookTitle) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st =
                     connection.prepareStatement(
                         "SELECT id FROM library.book WHERE title = ?;")) {
                st.setString(1, bookTitle);
                try (ResultSet resultSet = st.executeQuery()) {
                    if (resultSet.next()) {
                        long id = resultSet.getLong(1);
                        return new Book(id, bookTitle);
                    } else {
                        return Book.createEmpty();
                    }
                }
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    User searchForUserByName(String username) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st =
                     connection.prepareStatement(
                         "SELECT id  FROM auth.user WHERE name = ?;")) {
                st.setString(1, username);
                try (ResultSet resultSet = st.executeQuery()) {
                    if (resultSet.next()) {
                        final long id = resultSet.getLong(1);
                        return new User(username, id);
                    } else {
                        return User.createEmpty();
                    }
                }
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    boolean areCredentialsValid(String username, String password) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st =
                     connection.prepareStatement(
                         "SELECT id FROM auth.user WHERE name = ? AND password_hash = ?;")) {
                final String hexHash = createHashedValueFromPassword(password);
                st.setString(1, username);
                st.setString(2, hexHash);
                try (ResultSet resultSet = st.executeQuery()) {
                    if (resultSet.next()) {
                        final long id = resultSet.getLong(1);
                        assert (id > 0);
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    void updateUserWithPassword(long id, String password) {
        CheckUtils.checkIntParamPositive(id);
        final SqlData sqlData = new SqlData(
            "Updates the user's password field with a new hash",
            "UPDATE auth.user SET password_hash = ? WHERE id = ?;");
        String hashedPassword = createHashedValueFromPassword(password);
        sqlData.addParameter(hashedPassword, String.class);
        sqlData.addParameter(id, Long.class);
        executeUpdateTemplate(sqlData);
    }

    private String createHashedValueFromPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedhash = digest.digest(
                password.getBytes(StandardCharsets.UTF_8));
            return bytesToHex(encodedhash);
        } catch (NoSuchAlgorithmException e) {
            throw new SqlRuntimeException(e);
        }
    }

    Loan searchForLoan(Book book) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st =
                     connection.prepareStatement(
                         "select loan.id, loan.borrow_date, loan.borrower, bor.name FROM library.loan loan JOIN library.borrower bor ON bor.id = loan.id WHERE loan.book = ?;")) {
                st.setLong(1, book.id);
                try (ResultSet resultSet = st.executeQuery()) {
                    if (resultSet.next()) {
                        final long loanId = resultSet.getLong(1);
                        final Date borrowDate = resultSet.getDate(2);
                        final long borrowerId = resultSet.getLong(3);
                        final String borrowerName = StringUtils.makeNotNullable(resultSet.getString(4));
                        final Date borrowDateNotNullable = borrowDate == null ? Date.valueOf("0000-01-01") : borrowDate;
                        return new Loan(book, new Borrower(borrowerId, borrowerName), loanId, borrowDateNotNullable);
                    } else {
                        return Loan.createEmpty();
                    }
                }
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    private static String bytesToHex(byte[] hash) {
        StringBuilder hexString = new StringBuilder();
        for (byte hash1 : hash) {
            String hex = Integer.toHexString(0xff & hash1);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }

    public static PersistenceLayer createEmpty() {
        return new PersistenceLayer(new EmptyDataSource());
    }

    public boolean isEmpty() {
        return this.dataSource.getClass().equals(EmptyDataSource.class);
    }

    /**
     * Records the current state of the database as a SQL script,
     * used later for restoring by something like {@link #runRestore(String)}
     * @param backupFileName the path to the sql script, based in the project home directory.
     */
    void runBackup(String backupFileName) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st = connection.prepareStatement("SCRIPT TO ?")) {
                st.setString(1, backupFileName);
                st.execute();
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    /**
     * Runs a database restore script.
     * @param backupFileName the path to the sql script, based in the project home directory.
     */
    void runRestore(String backupFileName) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st = connection.prepareStatement(
                "DROP SCHEMA IF EXISTS ADMINISTRATIVE CASCADE;" +
                    "DROP SCHEMA IF EXISTS AUTH CASCADE;" +
                    "DROP SCHEMA IF EXISTS LIBRARY CASCADE;")) {
                st.execute();
            }
            try (PreparedStatement st = connection.prepareStatement("RUNSCRIPT FROM ?")) {
                st.setString(1, backupFileName);
                st.execute();
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    /**
     * Cleans the database and runs the scripts to update it
     * to the most current version.
     */
    public static void cleanAndMigrateDatabase() {
        cleanDatabase();
        migrateDatabase();
    }

    /**
     * Cleans the database and runs the scripts to update it
     * to the most current version.
     */
    public static void cleanDatabase() {
        Flyway flyway = configureFlyway();
        flyway.clean();
    }

    /**
     * Cleans the database and runs the scripts to update it
     * to the most current version.
     */
    public static void migrateDatabase() {
        Flyway flyway = configureFlyway();
        flyway.migrate();
    }

    private static Flyway configureFlyway() {
        return Flyway.configure()
            .schemas("ADMINISTRATIVE", "LIBRARY", "AUTH")
            .dataSource(obtainConnectionPool())
            .load();
    }

}
