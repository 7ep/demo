package com.coveros.training.persistence;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * We're aiming for a null-safe application.  To use Connection
 * safely in that paradigm, we need to wrap it and control
 * its behavior.  This object represents the connection
 * when we don't actually have a connection - it's an
 * equivalent to null.
 *
 * If this connection is used in non-test code, it will fail fast.
 * That is what we want to happen.
 */
class EmptyConnection implements Connection {

    @Override
    public Statement createStatement() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public PreparedStatement prepareStatement(String sql) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public CallableStatement prepareCall(String sql) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public String nativeSQL(String sql) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void setAutoCommit(boolean autoCommit) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public boolean getAutoCommit() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void commit() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void rollback() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void close() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public boolean isClosed() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public DatabaseMetaData getMetaData() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void setReadOnly(boolean readOnly) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public boolean isReadOnly() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void setCatalog(String catalog) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public String getCatalog() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void setTransactionIsolation(int level) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public int getTransactionIsolation() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public SQLWarning getWarnings() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void clearWarnings() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public Map<String, Class<?>> getTypeMap() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void setHoldability(int holdability) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public int getHoldability() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public Savepoint setSavepoint() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public Savepoint setSavepoint(String name) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void rollback(Savepoint savepoint) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public Clob createClob() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public Blob createBlob() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public NClob createNClob() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public SQLXML createSQLXML() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public boolean isValid(int timeout) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void setClientInfo(String name, String value) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void setClientInfo(Properties properties) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public String getClientInfo(String name) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public Properties getClientInfo() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void setSchema(String schema) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public String getSchema() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void abort(Executor executor) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public int getNetworkTimeout() {
        throw new RuntimeException("not implemented");
    }

    @Override
    public <T> T unwrap(Class<T> iface) {
        throw new RuntimeException("not implemented");
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) {
        throw new RuntimeException("not implemented");
    }
}
